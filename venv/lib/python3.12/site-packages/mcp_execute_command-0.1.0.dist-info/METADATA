Metadata-Version: 2.3
Name: mcp-execute-command
Version: 0.1.0
Summary: An MCP server for executing commands across platforms
Project-URL: Homepage, https://github.com/modelcontextprotocol/mcp-execute-command
Project-URL: Bug Tracker, https://github.com/modelcontextprotocol/mcp-execute-command/issues
Author-email: Claude Assistant <claude@anthropic.com>
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Requires-Dist: aiohttp>=3.11.8
Requires-Dist: asyncio>=3.4.3
Requires-Dist: platformdirs>=4.3.6
Requires-Dist: psutil>=6.1.0
Description-Content-Type: text/markdown

# MCP Execute Command Server

An implementation of the Model Context Protocol (MCP) server for executing commands across different platforms.

## Features

- Cross-platform command execution
- Support for both shell and direct command execution
- Configurable working directory
- Comprehensive error handling and reporting

## Installation

```bash
pip install mcp-execute-command
```

## Usage

### As a Library

```python
from mcp_execute_command import MCPExecuteCommandServer

server = MCPExecuteCommandServer()
asyncio.run(server.start())
```

### Command Line

```bash
python -m mcp_execute_command
```

## Protocol Implementation

This server implements the MCP protocol with the following capabilities:

- Tool: `execute_command`
  - Version: 1.0
  - Methods:
    - `execute_command`: Execute a command and return results

### Request Format

```json
{
    "jsonrpc": "2.0",
    "method": "execute_command",
    "params": {
        "command": "echo 'hello world'",
        "shell": false,
        "cwd": "/optional/working/directory"
    },
    "id": 1
}
```

### Response Format

```json
{
    "jsonrpc": "2.0",
    "result": {
        "success": true,
        "returncode": 0,
        "stdout": "hello world\n",
        "stderr": ""
    },
    "id": 1
}
```

## License

MIT License